const mobileMenu = document.getElementById('mobile-menu');
const navList = document.querySelector('.nav-list');

mobileMenu.addEventListener('click', () => {
    navList.classList.toggle('show');
});


let cartCount = 0;
const productList = [
    { name: "Caf√© Original", price: 65, img: "original.png" },
    { name: "Caf√© Mixto", price: 65, img: "cafe6.png" },
    { name: "Caf√© con Sand√≠a", price: 65, img: "cafe5.png" },
    { name: "Caf√© con Naranja", price: 65, img: "cafe6.png" },
    { name: "Caf√© con Pi√±a Hawaiana", price: 65, img: "cafe6.png" },
    { name: "Caf√© con Maracuy√°", price: 65, img: "cafe6.png" },
    { name: "Caf√© con Melocoton", price: 65, img: "cafe6.png" },
 
];

let cart = [];
function addToCart(productName) {
    const product = productList.find(p => p.name === productName);
    const existingProduct = cart.find(item => item.name === productName);

    if (existingProduct) {
        existingProduct.quantity++;
    } else {
        cart.push({ ...product, quantity: 1 });
    }
    
    cartCount++;
    document.querySelector('.cart-count').textContent = cartCount;
    updateCart();
}

function updateCart() {
    const cartItems = document.getElementById('cart-items');
    cartItems.innerHTML = '';

    let total = 0;
    cart.forEach(item => {
        const itemTotal = item.price * item.quantity;
        total += itemTotal;

        const cartItem = document.createElement('div');
        cartItem.className = 'cart-item';
        cartItem.innerHTML = `
            <img src="${item.img}" alt="${item.name}" class="cart-item-image">
            <span class="cart-item-name">${item.name} (x${item.quantity})</span>
            <span>${itemTotal} C$</span>
            <span class="remove-item" onclick="removeFromCart('${item.name}')">üóëÔ∏è</span>
        `;
        cartItems.appendChild(cartItem);
    });

    document.getElementById('cart-total').textContent = total;
}

function toggleCart() {
    const cartModal = document.getElementById("cart-modal");
    cartModal.style.display = cartModal.style.display === "block" ? "none" : "block";
}

function removeFromCart(productName) {
    const productIndex = cart.findIndex(item => item.name === productName);

    if (productIndex !== -1) {
        cartCount -= cart[productIndex].quantity;
        cart.splice(productIndex, 1);
    }

    document.querySelector('.cart-count').textContent = cartCount;
    updateCart();
}









let currentIndex = 0; // √çndice del producto actual
let productItems; // Para almacenar los elementos del producto

document.addEventListener('DOMContentLoaded', () => {
    productItems = document.querySelectorAll('.product-item'); // Guardar todos los productos

    // Mostrar el primer producto al cargar
    showProduct(currentIndex);

    document.querySelector('.prev-button').addEventListener('click', () => moveCarousel(-1));
    document.querySelector('.next-button').addEventListener('click', () => moveCarousel(1));

    const searchInput = document.querySelector('.search-input');
    searchInput.addEventListener('input', searchProducts); // Escuchar cambios en la b√∫squeda
});

function showProduct(index) {
    productItems.forEach((product, i) => {
        product.classList.toggle('active', i === index);
    });
}

function moveCarousel(direction) {
    // Aseg√∫rate de que currentIndex se actualiza correctamente
    currentIndex += direction;

    // Manejar el √≠ndice de forma circular
    if (currentIndex < 0) {
        currentIndex = productItems.length - 1;
    } else if (currentIndex >= productItems.length) {
        currentIndex = 0;
    }

    // Mostrar el producto actual
    showProduct(currentIndex);
}

function searchProducts() {
    const query = document.querySelector('.search-input').value.toLowerCase();
    const productItems = document.querySelectorAll('.product-item');
    
    let visibleCount = 0; // Contador de productos visibles

    productItems.forEach((item, index) => {
        const productName = item.querySelector('h3').textContent.toLowerCase();
        const isVisible = productName.includes(query);

        item.style.display = isVisible ? 'block' : 'none'; // Cambia la visibilidad seg√∫n la b√∫squeda

        if (isVisible) {
            visibleCount++;
            // Ajustar el √≠ndice actual si es necesario
            if (index === currentIndex && !isVisible) {
                currentIndex = Math.max(0, currentIndex - 1); // Asegura que el √≠ndice se mantenga dentro de l√≠mites
            }
        }
    });

    // Si no hay productos visibles, reiniciar el √≠ndice
    if (visibleCount === 0) {
        currentIndex = 0;
    } else if (currentIndex >= productItems.length) {
        currentIndex = productItems.length - 1; // Aseg√∫rate de no exceder el l√≠mite
    }

    // Mostrar el producto actual
    showProduct(currentIndex);

    // Si deseas ocultar los botones si no hay productos visibles
    const navigationButtons = document.querySelectorAll('.prev-button, .next-button');
    navigationButtons.forEach(button => {
        button.style.display = visibleCount > 0 ? 'block' : 'none';
    });
}






















document.addEventListener('DOMContentLoaded', () => {
    let currentIndex = 0;
    const productItems = document.querySelectorAll('.product-item');

    function showProduct(index) {
        productItems.forEach((product, i) => {
            product.classList.toggle('active', i === index);
        });
        
    }

    const searchInput = document.querySelector('.search-input');
    if (searchInput) {
        searchInput.style.width = '200px';
    }



    function moveCarousel(direction) {
        currentIndex += direction;
        if (currentIndex < 0) {
            currentIndex = productItems.length - 1;
        } else if (currentIndex >= productItems.length) {
            currentIndex = 0;
        }
        showProduct(currentIndex);
    }

    showProduct(currentIndex);

    
    document.querySelector('.prev-button').addEventListener('click', () => moveCarousel(-1));
    document.querySelector('.next-button').addEventListener('click', () => moveCarousel(1));
});




// Funci√≥n para abrir el formulario de pago
function openPaymentForm() {
    const paymentFormModal = document.getElementById("payment-form-modal");
    paymentFormModal.style.display = "flex";
}

// Funci√≥n para alternar la visibilidad del formulario de pago
function togglePaymentForm() {
    const paymentFormModal = document.getElementById("payment-form-modal");
    paymentFormModal.style.display = paymentFormModal.style.display === "flex" ? "none" : "flex";
}

// Funci√≥n para procesar el pago al enviar el formulario
function processPayment(event) {
    event.preventDefault(); // Prevenir el comportamiento por defecto del formulario

    // Recolecci√≥n de datos del formulario
    const cardName = document.getElementById('card-name').value;
    const cardNumber = document.getElementById('card-number').value;
    const cvv = document.getElementById('cvv').value;
    const email = document.getElementById('email').value;
    const country = document.getElementById('country').value;
    const city = document.getElementById('city').value;
    const coupon = document.getElementById('coupon').value;
    const paymentMethod = document.getElementById('payment-method').value;

    // Obtenemos el total del carrito (puedes cambiar este valor seg√∫n tus necesidades)
    const total = document.getElementById('cart-total') ? document.getElementById('cart-total').textContent : "0";

    // Formatear detalles adicionales para la factura
    const invoiceDetails = `
        <strong>Nombre en la tarjeta:</strong> ${cardName}<br>
        <strong>N√∫mero de tarjeta:</strong> ${cardNumber.replace(/\d{12}(\d{4})/, "**** **** **** $1")}<br>
        <strong>CVV:</strong> ${cvv}<br>
        <strong>Correo electr√≥nico:</strong> ${email}<br>
        <strong>Pa√≠s:</strong> ${country}<br>
        <strong>Ciudad:</strong> ${city}<br>
        <strong>M√©todo de Pago:</strong> ${paymentMethod}<br>
        ${coupon ? `<strong>Cup√≥n aplicado:</strong> ${coupon}<br>` : ""}
    `;

    showInvoice(total, invoiceDetails); // Muestra la factura

    // Limpiar el carrito y cerrar el formulario de pago
    if (typeof cart !== 'undefined') {
        cart = [];
        cartCount = 0;
        document.querySelector('.cart-count').textContent = cartCount;
        document.getElementById('cart-items').innerHTML = '';
        document.getElementById('cart-total').textContent = '0';
    }
    togglePaymentForm();
    if (typeof toggleCart === 'function') toggleCart(); // Cierra el carrito si existe la funci√≥n
}

// Funci√≥n para mostrar el modal de la factura con los detalles del pago
function showInvoice(totalAmount, details) {
    const invoiceModal = document.getElementById("invoice-modal");
    document.getElementById("invoice-amount").textContent = `Monto pagado: ${totalAmount} C$`;
    document.getElementById("invoice-details").innerHTML = details;
    invoiceModal.style.display = "flex"; // Muestra el modal de la factura
}

// Funci√≥n para cerrar el modal de la factura
function closeInvoiceModal() {
    const invoiceModal = document.getElementById("invoice-modal");
    invoiceModal.style.display = "none";
}







//nosotros

// JavaScript para activar la clase 'visible'
document.addEventListener('DOMContentLoaded', () => {
    const nosotrosContent = document.querySelector('.nosotros-content');
    
    // Observador de intersecci√≥n para detectar cuando el contenido entra en la vista
    const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                nosotrosContent.classList.add('visible');
                observer.unobserve(entry.target); // Deja de observar despu√©s de hacer visible
            }
        });
    });

    observer.observe(nosotrosContent);
});












function addReview() {
    const reviewText = document.getElementById('review-text').value;
    const reviewAuthor = document.getElementById('review-author').value;

    if (reviewText && reviewAuthor) {
        const reviewContainer = document.createElement('div');
        reviewContainer.classList.add('review');

        reviewContainer.innerHTML = `
            <p class="review-text">"${reviewText}"</p>
            <p class="review-author">‚Äì ${reviewAuthor}</p>
            <button class="like-btn" onclick="likeReview(this)">üëç <span>0</span></button>
            <button class="reply-btn" onclick="toggleReplyForm(this)">Responder</button>
            <div class="replies"></div>
        `;

        document.getElementById('reviews').appendChild(reviewContainer);

        document.getElementById('review-text').value = '';
        document.getElementById('review-author').value = '';
    } else {
        alert('Por favor, completa los campos de texto y nombre.');
    }
}

function likeReview(button) {
    let likeCount = button.querySelector('span');
    likeCount.innerText = parseInt(likeCount.innerText) + 1;
}

function toggleReplyForm(button) {
    let replyContainer = button.nextElementSibling;
    if (!replyContainer.querySelector('.reply-form')) {
        const replyForm = document.createElement('div');
        replyForm.classList.add('reply-form');
        replyForm.innerHTML = `
            <textarea class="reply-text" placeholder="Escribe tu respuesta"></textarea>
            <button onclick="addReply(this)">Responder</button>
        `;
        replyContainer.appendChild(replyForm);
    } else {
        replyContainer.querySelector('.reply-form').remove();
    }
}

function addReply(button) {
    const replyText = button.previousElementSibling.value;
    if (replyText) {
        const replyContainer = button.closest('.replies');
        const newReply = document.createElement('div');
        newReply.classList.add('reply');
        newReply.innerText = replyText;

        replyContainer.appendChild(newReply);
        button.closest('.reply-form').remove();
    } else {
        alert('Por favor, escribe una respuesta antes de enviar.');
    }
}


function toggleAnswer(element) {
    const answer = element.nextElementSibling;
    answer.style.display = answer.style.display === 'block' ? 'none' : 'block';
}







let currentUtterancee = null; // Variable para almacenar la utterance actual

// Funci√≥n para leer el contenido de cada post del blog
function speakBlogPost(postType) {
    // Detener la utterance anterior si est√° en curso
    if (currentUtterance) {
        window.speechSynthesis.cancel(); // Cancela la lectura anterior
    }

    let speechText = '';

    switch (postType) {
        case 'benefits':
            speechText = `Beneficios del Caf√© Energizante. El caf√© energizante te proporciona energ√≠a sostenida sin el nerviosismo asociado a otros caf√©s. Es ideal para quienes buscan un impulso durante el d√≠a. Adem√°s, este tipo de caf√© es rico en antioxidantes, que ayudan a combatir los radicales libres en el cuerpo y a reducir el riesgo de enfermedades cr√≥nicas. Su consumo puede mejorar el estado de alerta y la concentraci√≥n. Tambi√©n se ha asociado con un aumento en el rendimiento f√≠sico, lo que lo hace ideal antes de hacer ejercicio. Otro beneficio importante es su capacidad para mejorar el estado de √°nimo. La cafe√≠na puede liberar neurotransmisores como la dopamina y la serotonina, que est√°n relacionados con la felicidad. Finalmente, gracias a su bajo contenido de acidez, es m√°s suave para el est√≥mago.`;
            break;
        case 'characteristics':
            speechText = `Caracter√≠sticas del Caf√© Energizante. Nuestro caf√© se elabora con granos de alta calidad, seleccionados a mano. El proceso de cold brew resalta los sabores suaves, creando una bebida m√°s rica y menos √°cida. Adem√°s, es vers√°til, permitiendo disfrutarlo tanto fr√≠o como caliente, y se puede personalizar a tus preferencias.`;
            break;
        case 'recipes':
            speechText = `M√©todo Cold Brew. El cold brew es conocido por sus caracter√≠sticas distintivas. Prueba un smoothie energizante combinando nuestro caf√© con pl√°tano y espinacas. Otra receta f√°cil es el caf√© helado con chocolate. Tambi√©n puedes experimentar con un caf√© con especias, a√±adiendo canela o vainilla. ¬°Las posibilidades son infinitas!`;
            break;
    }

    currentUtterance = new SpeechSynthesisUtterance(speechText);
    window.speechSynthesis.speak(currentUtterance);
}

// Modificaci√≥n de la funci√≥n showPost para incluir la lectura
function showPost(postType) {
    let content = '';
    
    switch (postType) {
        case 'benefits':
            content = `<h2>Beneficios del Caf√© Energizante</h2>
                       <p>El caf√© energizante te proporciona energ√≠a sostenida sin el nerviosismo asociado a otros caf√©s. Es ideal para quienes buscan un impulso durante el d√≠a.</p>
                       <p>Adem√°s, este tipo de caf√© es rico en antioxidantes, que ayudan a combatir los radicales libres en el cuerpo y a reducir el riesgo de enfermedades cr√≥nicas.</p>
                       <p>Su consumo puede mejorar el estado de alerta y la concentraci√≥n, lo que lo convierte en una excelente opci√≥n para estudiar o trabajar. Tambi√©n se ha asociado con un aumento en el rendimiento f√≠sico, lo que lo hace ideal antes de hacer ejercicio.</p>
                       <p>Otro beneficio importante del caf√© energizante es su capacidad para mejorar el estado de √°nimo. La cafe√≠na puede liberar neurotransmisores como la dopamina y la serotonina, que est√°n relacionados con la felicidad y la sensaci√≥n de bienestar.</p>
                       <p>Finalmente, gracias a su bajo contenido de acidez, es m√°s suave para el est√≥mago que otras bebidas con cafe√≠na, lo que permite disfrutarlo sin molestias digestivas.</p>
                       <img src="bene1.webp" alt="Beneficio 1" style="max-width: 100%; height: auto; margin: 10px 0;">`;
            break;
        case 'characteristics':
            content = `<h2>Caracter√≠sticas del Caf√© Energizante</h2>
                       <p>Nuestro caf√© se elabora con granos de alta calidad, seleccionados a mano para garantizar el mejor sabor y aroma.</p>
                       <p>El proceso de cold brew resalta los sabores suaves, creando una bebida m√°s rica y menos √°cida que los caf√©s tradicionales, lo que la hace m√°s f√°cil de digerir.</p>
                       <p>Adem√°s, nuestro caf√© energizante es vers√°til, lo que permite disfrutarlo tanto fr√≠o como caliente, y se puede personalizar con leche, edulcorantes o sabores adicionales para adaptarse a tus preferencias.</p>`;
            break;
        case 'recipes':
            content = `<h2>M√©todo Cold Brew</h2>
                       <p>El cold brew es conocido por sus caracter√≠sticas distintivas:</p>
                       <ul>
                           <li><strong>Sabor Suave y Menos √Åcido:</strong> Debido a la baja temperatura del agua, el cold brew suele tener un sabor m√°s suave y menos √°cido en comparaci√≥n con el caf√© preparado con agua caliente. Esto se debe a que la extracci√≥n a temperaturas m√°s bajas no libera ciertos √°cidos y compuestos amargos.</li>
                           <li><strong>Perfil de Sabor Complejo:</strong> El m√©todo cold brew permite extraer una variedad de sabores complejos del caf√©, lo que puede resultar en una bebida m√°s rica y arom√°tica.</li>
                           <li><strong>Concentrado Vers√°til:</strong> El caf√© cold brew se puede preparar como un concentrado que luego se puede diluir con agua, leche o crema seg√∫n el gusto.</li>
                           <li><strong>Tiempo de Preparaci√≥n:</strong> La preparaci√≥n del cold brew requiere un tiempo de infusi√≥n de al menos 12 a 24 horas, lo que lo diferencia de m√©todos de preparaci√≥n m√°s r√°pidos.</li>
                       </ul>
                       <p>Prueba un smoothie energizante combinando nuestro caf√© con pl√°tano y espinacas para un desayuno delicioso y nutritivo. Simplemente mezcla 1 taza de caf√© fr√≠o, 1 pl√°tano, 1 taza de espinacas y un poco de yogur.</p>
                       <p>Otra receta f√°cil es el caf√© helado con chocolate: mezcla 1 taza de caf√© fr√≠o con 1 cucharada de cacao en polvo y hielo. Agrega un poco de leche para un toque cremoso y disfruta de un refresco energ√©tico.</p>
                       <p>Tambi√©n puedes experimentar con un caf√© con especias, a√±adiendo canela o vainilla para un sabor diferente. ¬°Las posibilidades son infinitas!</p>`;
            break;
    }

    document.getElementById('blog-detail').innerHTML = content;
    document.getElementById('blog-content').style.display = 'block';

    // Llama a la funci√≥n para leer el contenido del post
    speakBlogPost(postType);
}

function stopReading() {
    if (currentUtterance) {
        window.speechSynthesis.cancel(); // Detiene la s√≠ntesis de voz
        currentUtterance = null; // Resetea la utterance actual
    }
}

function hidePost() {
    document.getElementById('blog-content').style.display = 'none';
    // Opcional: Detener la lectura al cerrar el post
    stopReading(); // Usar la funci√≥n stopReading para detener la lectura
}









document.getElementById('tutorial-button').addEventListener('click', function() {
    var videoContainer = document.getElementById('video-container');
    var videoPlayer = document.getElementById('myVideo');

    videoContainer.style.display = 'flex'; // Muestra el contenedor a pantalla completa
    videoPlayer.play(); // Reproduce el video
});

document.getElementById('close-button').addEventListener('click', function() {
    var videoContainer = document.getElementById('video-container');
    var videoPlayer = document.getElementById('myVideo');

    videoPlayer.pause(); // Pausa el video
    videoPlayer.currentTime = 0; // Reinicia el video al principio
    videoContainer.style.display = 'none'; // Oculta el contenedor a pantalla completa
});














function leerSeccion(idSeccion) {
    const synth = window.speechSynthesis;
    const seccion = document.getElementById(idSeccion);
    
    // Captura el texto del contenido de la secci√≥n
    const texto = document.querySelector('.specialties-section').innerText;

    // Crea un objeto para la s√≠ntesis de voz
    const utterance = new SpeechSynthesisUtterance(texto);
    utterance.lang = 'es-ES';

    // Cancela cualquier s√≠ntesis en curso antes de comenzar una nueva
    synth.cancel(); 
    synth.speak(utterance);
}

function detenerLectura() {
    const synth = window.speechSynthesis;
    synth.cancel(); // Cancela cualquier s√≠ntesis en curso
}








let currentIndexv = 0; // Aseg√∫rate de tener esta variable definida
const products = document.querySelectorAll('.product-item'); // Aseg√∫rate de que esta selecci√≥n sea correcta

// Variable para almacenar la utterance actual
let currentUtterance = null; 

function speakProductInfo(index) {
    // Detener la utterance anterior si est√° en curso
    if (currentUtterance) {
        window.speechSynthesis.cancel(); // Cancela la lectura anterior
    }

    const product = products[index];
    const productName = product.querySelector('h3').textContent;
    const productDescription = product.querySelector('p').textContent;
    const productPrice = product.querySelector('.product-price').textContent;

    const speechText = `Producto: ${productName}. Descripci√≥n: ${productDescription}. Precio: ${productPrice}.`;

    currentUtterance = new SpeechSynthesisUtterance(speechText);
    window.speechSynthesis.speak(currentUtterance);
}

// Funci√≥n para manejar la acci√≥n de leer el producto actual
function leerProductoActual() {
    speakProductInfo(currentIndex); // Llama a la funci√≥n para leer el producto actual
}

// Al mover el carrusel, muestra el producto actual
function moveCarousel(direction) {
    currentIndex += direction;

    // Manejar el √≠ndice de forma circular
    if (currentIndex < 0) {
        currentIndex = products.length - 1;
    } else if (currentIndex >= products.length) {
        currentIndex = 0;
    }

    // Mostrar el producto actual
    showProduct(currentIndex);
}

// Funci√≥n para mostrar el producto en el carrusel
function showProduct(index) {
    const productItems = document.querySelectorAll('.product-item');
    
    // Oculta todos los productos
    productItems.forEach((item, i) => {
        item.style.display = i === index ? 'block' : 'none';
    });
}

// Detener cualquier lectura en curso
function stopSpeech() {
    window.speechSynthesis.cancel(); // Detiene cualquier lectura en curso
}

// Asumiendo que tienes un bot√≥n con el ID 'readButton' para iniciar la lectura
document.getElementById('readButton').addEventListener('click', leerProductoActual);


// Declara currentUtterance globalmente
let currentUtterancem = null;

function speakAboutUs() {
    // Detener la utterance anterior si est√° en curso
    if (currentUtterance) {
        window.speechSynthesis.cancel(); // Cancela la lectura anterior
    }

    const nosotrosText = document.getElementById('nosotros-text');
    if (!nosotrosText) return; // Verifica que el elemento existe

    // Obtener texto de h2 y p√°rrafos
    const h2 = nosotrosText.querySelector('h2') ? nosotrosText.querySelector('h2').textContent : '';
    const paragraphs = Array.from(nosotrosText.querySelectorAll('p')).map(p => p.textContent).join(' ');

    // Obtener texto de los elementos h3
    const h3s = Array.from(nosotrosText.querySelectorAll('h3')).map(h3 => h3.textContent).join(' ');

    // Combinar todo el texto
    const speechText = `${h2}. ${paragraphs} ${h3s}.`;

    // Crear la utterance y hablar
    currentUtterance = new SpeechSynthesisUtterance(speechText);
    window.speechSynthesis.speak(currentUtterance);
}

// Llama a esta funci√≥n cuando la secci√≥n "Nosotros" sea visible
function showNosotrosSection() {
    const nosotrosSection = document.getElementById('nosotros');
    if (nosotrosSection) {
        nosotrosSection.scrollIntoView({ behavior: 'smooth' }); // Desplaza hacia la secci√≥n "Nosotros"
        speakAboutUs(); // Llama a la funci√≥n para leer la secci√≥n "Nosotros"
    }
}

function stopSpeecha() {
    window.speechSynthesis.cancel(); // Detiene cualquier lectura en curso
    currentUtterance = null; // Restablece la variable de utterance
}





// Declara una sola variable para la utterance
let currentUtteranceg = null;

function speakColdBrewProcess() {
    // Detener la utterance anterior si est√° en curso
    if (currentUtterance) {
        window.speechSynthesis.cancel(); // Cancela la lectura anterior
    }

    const procesoSection = document.querySelector('.fashion-section');
    if (!procesoSection) return; // Verifica que el elemento existe

    const h2Element = procesoSection.querySelector('.section-title h2');
    const h2 = h2Element ? h2Element.textContent : ''; // Asegura que el h2 exista

    const items = Array.from(procesoSection.querySelectorAll('.item'));

    // Re√∫ne el texto de cada item
    const itemTexts = items.map(item => {
        const titleElement = item.querySelector('.description .section-title h3');
        const title = titleElement ? titleElement.textContent : ''; // Asegura que el h3 exista
        const descriptionElement = item.querySelector('p');
        const description = descriptionElement ? descriptionElement.textContent : ''; // Asegura que el p√°rrafo exista
        return `${title}. ${description}`;
    }).join(' ');

    const speechText = `${h2}. ${itemTexts}`;

    // Crear la utterance y hablar
    currentUtterance = new SpeechSynthesisUtterance(speechText);
    window.speechSynthesis.speak(currentUtterance);
}

// Llama a esta funci√≥n cuando la secci√≥n "Proceso" sea visible
function showProcesoSection() {
    const procesoSection = document.getElementById('proceso');
    if (procesoSection) {
        procesoSection.scrollIntoView({ behavior: 'smooth' }); // Desplaza hacia la secci√≥n "Proceso"
        speakColdBrewProcess(); // Llama a la funci√≥n para leer la secci√≥n "Proceso"
    }
}

function stopProcesoSpeech() {
    if (currentUtterance) {
        window.speechSynthesis.cancel(); // Detiene cualquier lectura en curso
        currentUtterance = null; // Restablece la variable de utterance
    }
}
